#include <iostream>


using namespace std;
class oneByOne {
private:
    int number  = 0;
    int numbers[500];
    bool key = false;
public:
    bool isKey() const;

    void setKey(bool key);

public:
    oneByOne(int number);

    int getNumber() const;

    void setNumber(int number);

    void show();
};
oneByOne::oneByOne(int number) : number(number) {
    this->setNumber(number);
    int temp;
    cin >> numbers[0];
    temp = numbers[0];
    this->setKey(true);
    for (int i=1;i<this->getNumber();i++) {
        cin >> numbers[i];
        temp --;
        if (temp <= numbers[i]) {
            temp = numbers[i];
        }
        if (temp <= 0) {
            this->setKey(false);
            break;
        }
    }

}

int oneByOne::getNumber() const {
    return number;
}

void oneByOne::setNumber(int number) {
    oneByOne::number = number;
}

void oneByOne::show() {
    if (this->isKey()) {
        cout << "true" << endl;
    } else {
        cout << "false" << endl;
    }
}

bool oneByOne::isKey() const {
    return key;
}

void oneByOne::setKey(bool key) {
    oneByOne::key = key;
}
int main() {

    oneByOne * dome = NULL;
    int number  = 0;
    cin >> number ;
    dome = new oneByOne(number);
    dome->show();
    return 0;
}